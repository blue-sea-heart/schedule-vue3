package com.blueseaheart.demo.domain;

import static com.blueseaheart.demo.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ReminderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReminderAllPropertiesEquals(Reminder expected, Reminder actual) {
        assertReminderAutoGeneratedPropertiesEquals(expected, actual);
        assertReminderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReminderAllUpdatablePropertiesEquals(Reminder expected, Reminder actual) {
        assertReminderUpdatableFieldsEquals(expected, actual);
        assertReminderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReminderAutoGeneratedPropertiesEquals(Reminder expected, Reminder actual) {
        assertThat(actual)
            .as("Verify Reminder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReminderUpdatableFieldsEquals(Reminder expected, Reminder actual) {
        assertThat(actual)
            .as("Verify Reminder relevant properties")
            .satisfies(a ->
                assertThat(a.getRemindAt()).as("check remindAt").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getRemindAt())
            )
            .satisfies(a -> assertThat(a.getChannel()).as("check channel").isEqualTo(expected.getChannel()))
            .satisfies(a -> assertThat(a.getSubject()).as("check subject").isEqualTo(expected.getSubject()))
            .satisfies(a -> assertThat(a.getContent()).as("check content").isEqualTo(expected.getContent()))
            .satisfies(a -> assertThat(a.getSent()).as("check sent").isEqualTo(expected.getSent()))
            .satisfies(a -> assertThat(a.getAttemptCount()).as("check attemptCount").isEqualTo(expected.getAttemptCount()))
            .satisfies(a ->
                assertThat(a.getLastAttemptAt())
                    .as("check lastAttemptAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getLastAttemptAt())
            )
            .satisfies(a -> assertThat(a.getLastErrorMsg()).as("check lastErrorMsg").isEqualTo(expected.getLastErrorMsg()))
            .satisfies(a -> assertThat(a.getErrorMsg()).as("check errorMsg").isEqualTo(expected.getErrorMsg()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReminderUpdatableRelationshipsEquals(Reminder expected, Reminder actual) {
        assertThat(actual)
            .as("Verify Reminder relationships")
            .satisfies(a -> assertThat(a.getSchedule()).as("check schedule").isEqualTo(expected.getSchedule()));
    }
}
