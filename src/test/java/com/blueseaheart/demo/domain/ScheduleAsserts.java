package com.blueseaheart.demo.domain;

import static com.blueseaheart.demo.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ScheduleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleAllPropertiesEquals(Schedule expected, Schedule actual) {
        assertScheduleAutoGeneratedPropertiesEquals(expected, actual);
        assertScheduleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleAllUpdatablePropertiesEquals(Schedule expected, Schedule actual) {
        assertScheduleUpdatableFieldsEquals(expected, actual);
        assertScheduleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleAutoGeneratedPropertiesEquals(Schedule expected, Schedule actual) {
        assertThat(actual)
            .as("Verify Schedule auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleUpdatableFieldsEquals(Schedule expected, Schedule actual) {
        assertThat(actual)
            .as("Verify Schedule relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getAllDay()).as("check allDay").isEqualTo(expected.getAllDay()))
            .satisfies(a ->
                assertThat(a.getStartTime())
                    .as("check startTime")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getStartTime())
            )
            .satisfies(a ->
                assertThat(a.getEndTime()).as("check endTime").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getEndTime())
            )
            .satisfies(a -> assertThat(a.getPriority()).as("check priority").isEqualTo(expected.getPriority()))
            .satisfies(a ->
                assertThat(a.getCompletedAt())
                    .as("check completedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCompletedAt())
            )
            .satisfies(a -> assertThat(a.getVisibility()).as("check visibility").isEqualTo(expected.getVisibility()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleUpdatableRelationshipsEquals(Schedule expected, Schedule actual) {
        assertThat(actual)
            .as("Verify Schedule relationships")
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getTags()).as("check tags").isEqualTo(expected.getTags()));
    }
}
