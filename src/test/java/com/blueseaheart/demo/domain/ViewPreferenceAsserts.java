package com.blueseaheart.demo.domain;

import static com.blueseaheart.demo.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ViewPreferenceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViewPreferenceAllPropertiesEquals(ViewPreference expected, ViewPreference actual) {
        assertViewPreferenceAutoGeneratedPropertiesEquals(expected, actual);
        assertViewPreferenceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViewPreferenceAllUpdatablePropertiesEquals(ViewPreference expected, ViewPreference actual) {
        assertViewPreferenceUpdatableFieldsEquals(expected, actual);
        assertViewPreferenceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViewPreferenceAutoGeneratedPropertiesEquals(ViewPreference expected, ViewPreference actual) {
        assertThat(actual)
            .as("Verify ViewPreference auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViewPreferenceUpdatableFieldsEquals(ViewPreference expected, ViewPreference actual) {
        assertThat(actual)
            .as("Verify ViewPreference relevant properties")
            .satisfies(a -> assertThat(a.getDefaultView()).as("check defaultView").isEqualTo(expected.getDefaultView()))
            .satisfies(a ->
                assertThat(a.getLastStart())
                    .as("check lastStart")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getLastStart())
            )
            .satisfies(a ->
                assertThat(a.getLastEnd()).as("check lastEnd").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getLastEnd())
            )
            .satisfies(a -> assertThat(a.getWeekStart()).as("check weekStart").isEqualTo(expected.getWeekStart()))
            .satisfies(a -> assertThat(a.getShowWeekend()).as("check showWeekend").isEqualTo(expected.getShowWeekend()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViewPreferenceUpdatableRelationshipsEquals(ViewPreference expected, ViewPreference actual) {
        // empty method
    }
}
